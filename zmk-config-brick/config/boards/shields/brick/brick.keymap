#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
};
&sk {
     release-after-ms = <2000>;
     quick-release;
};
&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>;
};

/* Layers */
#define AL1 0
#define AL2 1
#define A2U 2
#define SYM 3
#define NAV 4
#define BLE 5
/ { 
    combos {
        compatible = "zmk,combos";
        combo_caps {
            timeout-ms = <175>;
            key-positions = <14 15>;
            bindings = <&caps_word>;
        };
        combo_NAV  {
            timeout-ms = <175>;
            key-positions = <1 2 3>;
            bindings = <&tog NAV>;
            layers = <AL1 NAV>;
        };
    };

    behaviors {
        m_l: mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MODS_L";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        m_r: mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MODS_R";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        l_l: layers_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERS_L";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        l_r: layers_right {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERS_R";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;
            quick-release;
        };
        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        al2macro: behavior_macro_1 {
			compatible = "zmk,behavior-macro";
			label = "MACRO1";
			#binding-cells = <0>;
			bindings = < &sl AL2 >;
		};
		a2umacro: behavior_macro_2 {
			compatible = "zmk,behavior-macro";
			label = "MACRO2";
			#binding-cells = <0>;
			bindings = < &sl A2U >;
        };
    };

    //      00  01  02  03  04      05  06  07  08  09
    //      10  11  12  13  14      15  16  17  18  19
    //      20  21  22  23  24      25  26  27  28  29

    keymap {
        compatible = "zmk,keymap";

        alpha1 {
            bindings = <
            &kp ESC     &m_l LCTL L  &m_l LALT G  &m_l LGUI D           &l_l BLE HASH  /**/  &l_r BLE DEL  &m_r RGUI H  &m_r RALT U  &m_r RCTL O  &kp BSPC
            &kp TAB     &kp S        &kp R        &l_l NAV T            &sk LSHFT      /**/  &sk RSHFT     &l_r NAV N   &kp E        &kp A        &kp RET
            &l_l SYM I  &kp FSLH     &kp MINUS    &mt LC(LS(LALT)) SPC  &key_repeat    /**/  &a2umacro     &al2macro    &kp COMMA    &kp DOT      &l_r SYM C
            >;
        };

        alpha2 {
            bindings = <
            &kp ESC  &kp V      &kp W      &kp M   &kp PRCNT  /**/  &kp DEL    &kp F    &kp SEMI   &kp Z     &kp BSPC
            &kp TAB  &kp J      &kp P      &kp K   &trans     /**/  &trans     &kp B    &kp COLON  &kp X     &kp RET
            &kp Q    &kp QMARK  &kp UNDER  &trans  &trans     /**/  &a2umacro  &to AL1  &kp DLLR   &kp AMPS  &kp Y
            >;
        };

        alpha2u {
            bindings = <
            &kp ESC    &kp LS(V)  &kp LS(W)  &kp LS(M)  &kp CARET  /**/  &kp DEL  &kp LS(F)  &kp DQT  &kp LS(Z)  &kp BSPC
            &kp TAB    &kp LS(J)  &kp LS(P)  &kp LS(K)  &trans     /**/  &trans   &kp LS(B)  &kp SQT  &kp LS(X)  &kp RET
            &kp LS(Q)  &kp EXCL   &kp AT     &trans     &trans     /**/  &to AL1  &to AL1    &none    &none      &kp LS(Y)
            >;
        };

        sym {
            bindings = <
            &kp ESC    &m_l LCTL GRAVE  &m_l LALT LBKT  &m_l LGUI RBKT  &kp QMARK  /**/  &td COMMA DOT  &td RS(N1) N1  &td RS(N2) N2  &td RS(N3) N3  &kp BSPC
            &kp TAB    &kp TILDE        &kp LPAR        &kp RPAR        &kp MINUS  /**/  &kp PLUS       &td RS(N4) N4  &td RS(N5) N5  &td RS(N6) N6  &kp RET
            &kp LSHFT  &kp BSLH         &kp PIPE        &trans          &trans     /**/  &kp FSLH       &td RS(N7) N7  &td RS(N8) N8  &td FSLH N9    &td EQUAL N0
            >;
        };

        nav {
            bindings = <
            &kp ESC    &m_l LCTL LG(LBKT)  &m_l LALT LG(RBKT)   &kp KP_NUM  &kp RC(RA(UP))    /**/  &kp DEL    &kp HOME  &kp UP     &kp END    &kp BSPC
            &kp TAB    &kp LG(LBRC)        &kp RG(RBRC)         &mkp LCLK   &kp RC(RA(DOWN))  /**/  &kp PG_UP  &kp LEFT  &kp DOWN   &kp RIGHT  &kp RET
            &kp LSHFT  &td LG(V) LG(C)     &td LG(LA(V)) LG(X)  &mkp RCLK   &mkp MCLK         /**/  &kp PG_DN  &kp RGUI  &kp COMMA  &kp SEMI   &kp LC(LS(LALT))
            >;
        };

        ble {
            bindings = <
            &out OUT_BLE  &none  &none  &none        &none  /**/  &none  &none        &none  &none  &out OUT_BLE
            &none         &none  &none  &bootloader  &none  /**/  &none  &bootloader  &none  &none  &none
            &reset        &none  &none  &none        &none  /**/  &none  &none        &none  &none  &reset
            >;
        };

    };
};
